{
	"icon_theme": "Bearded Icon Theme",
	"edit_predictions": {
		"disabled_globs": [
			"**/.env*",
			"**/*.pem",
			"**/*.key",
			"**/*.cert",
			"**/*.crt",
			"**/secrets.yml",
			"algorithm/src/main.rs",
			"main.cpp"
		]
	},
	"base_keymap": "VSCode",
	"theme": "Catppuccin Frapp√©",
	"experimental.theme_overrides": {
		"background.appearance": "blurred",
		"background": "#00000030",
		"editor.background": "#00000030",
		"editor.gutter.background": "#00000030",
		"tab_bar.background": "#00000030",
		"terminal.background": "#00000030",
		"toolbar.background": "#00000030",
		"tab.active_background": "#00000020",
		"tab.inactive_background": "#00000000",
		"status_bar.background": "#00000030",
		"title_bar.background": "#00000030",
		"panel.background": "#00000030",
		"border.variant": "#00000000",
		"scrollbar.track.border": "#00000000",
		"editor.active_line.background": "#00000000"
	},
	"ui_font_size": 19,
	"buffer_font_size": 20.0,
	// NOTE: Change the font family to your preference
	"buffer_font_family": "JetBrainsMono Nerd Font, Pretendard",
	// Vim mode settings
	"vim_mode": true,
	// use relative line numbers
	"relative_line_numbers": true,
	"tab_bar": {
		"show": true
	},
	"scrollbar": {
		"show": "never"
	},
	// Indentation, rainbow indentation
	"indent_guides": {
		"enabled": true,
		"coloring": "indent_aware"
	},
	// NOTE: Zen mode, refer https://github.com/zed-industries/zed/issues/4382 when it's resolved
	"centered_layout": {
		"left_padding": 0.15,
		"right_padding": 0.15
	},
	// Use Copilot Chat AI as default
	"assistant": {
		"default_model": {
			"provider": "copilot_chat",
			"model": "claude-3-7-sonnet"
		},
		"version": "2"
	},
	// Uncomment below to use local AI with Ollama, refer https://zed.dev/docs/language-model-integration?highlight=ollama#using-ollama-on-macos
	// "assistant": {
	//   "default_model": {
	//     "provider": "ollama",
	//     "model": "llama3.1:latest"
	//   },
	//   "version": "2",
	//   "provider": null
	// },
	"language_models": {
		"ollama": {
			"api_url": "http://localhost:11434"
		}
	},
	// Inlay hints preconfigured by Zed: Go, Rust, Typescript and Svelte
	"inlay_hints": {
		"enabled": true
	},
	// LSP
	"lsp": {
		"typescript-language-server": {
			"initialization_options": {
				"preferences": {
					"includeInlayParameterNameHints": "all",
					"includeInlayParameterNameHintsWhenArgumentMatchesName": true,
					"includeInlayFunctionParameterTypeHints": true,
					"includeInlayVariableTypeHints": true,
					"includeInlayVariableTypeHintsWhenTypeMatchesName": true,
					"includeInlayPropertyDeclarationTypeHints": true,
					"includeInlayFunctionLikeReturnTypeHints": true,
					"includeInlayEnumMemberValueHints": true
				}
			}
		},
		"tailwindcss-language-server": {
			"settings": {
				"classAttributes": ["class", "className", "ngClass", "styles"]
			}
		},
		"clangd": {
			"binary": {
				"path": "/usr/bin/clangd",
				"arguments": []
			}
		},
		"jdtls": {
			"initialization_options": {
				"bundles": [],
				"workspaceFolders": ["file:///home/workspace/spring-practice"],
				"settings": {
					"java": {
						"home": "/usr/lib/jvm/default",
						"errors": {
							"incompleteClasspath": {
								"severity": "warning"
							}
						},
						"configuration": {
							"updateBuildConfiguration": "interactive",
							"configuration.runtimes": [
								{
									"name": "JavaSE-1.8",
									"path": "/usr/lib/jvm/java-8-openjdk"
								},
								{
									"name": "JavaSE-21",
									"path": "/usr/lib/jvm/java-21-openjdk",
									"default": true
								},
								{
									"name": "JavaSE-24",
									"path": "/usr/lib/jvm/java-24-openjdk"
								}
							],
							"maven": {
								"userSettings": null
							}
						},
						"trace": {
							"server": "verbose"
						},
						"import": {
							"gradle": {
								"enabled": true
							},
							"maven": {
								"enabled": true
							},
							"exclusions": [
								"**/node_modules/**",
								"**/.metadata/**",
								"**/archetype-resources/**",
								"**/META-INF/maven/**",
								"/**/test/**"
							]
						},
						"jdt": {
							"ls": {
								"lombokSupport": {
									"enabled": true
								}
							}
						},
						"referencesCodeLens": {
							"enabled": true
						},
						"signatureHelp": {
							"enabled": true,
							"description": {
								"enabled": true
							}
						},
						"implementationsCodeLens": {
							"enabled": true
						},
						"inlayHints": {
							"parameterNames": {
								"enabled": "all"
							}
						},
						"format": {
							"enabled": true
						},
						"saveActions": {
							"organizeImports": true
						},
						"contentProvider": {
							"preferred": null
						},
						"autobuild": {
							"enabled": true
						},
						"completion": {
							"favoriteStaticMembers": [
								"org.junit.Assert.*",
								"org.junit.Assume.*",
								"org.junit.jupiter.api.Assertions.*",
								"org.junit.jupiter.api.Assumptions.*",
								"org.junit.jupiter.api.DynamicContainer.*",
								"org.junit.jupiter.api.DynamicTest.*",
								"org.assertj.core.api.Assertions.*",
								"org.mockito.Mockito.*"
							],
							"importOrder": [
								"java",
								"jakarta",
								"javax",
								"org.springframework",
								"com",
								"org"
							]
						},
						"spring-boot.ls.enabled": true
					}
				}
			}
		},
		// "java": {
		//   "settings": {
		//     "java.jdt.ls.lombokSupport.enabled:": true
		//   }
		// },
		// toml
		"taplo": {
			"settings": {
				"array_auto_collapse": false
			}
		},
		// Rust
		"rust-analyzer": {
			"binary": {
				"path": "/usr/bin/rust-analyzer",
				"arguments": []
			},
			"initialization_options": {
				// get more cargo-less diagnostics from rust-analyzer,
				// which might include false-positives (those can be turned off by their names)
				"diagnostics": {
					"experimental": {
						"enable": true
					}
				},
				"checkOnSave": {
					"command": "clippy"
				},
				"inlayHints": {
					"maxLength": 100,
					"lifetimeElisionHints": {
						"enable": "skip_trivial",
						"useParameterNames": true
					},
					"closureReturnTypeHints": {
						"enable": "always"
					}
				}
			}
		},
		"elixir-ls": {
			"settings": {
				"dialyzerEnabled": false
			}
		},
		"biome": {
			"settings": {
				// Enable biome only when biome.json is present
				"require_config_file": true
			}
		}
	},
	"languages": {
		// Refer https://zed.dev/docs/languages/javascript and https://zed.dev/docs/languages/typescript for more info
		"JavaScript": {
			"tab_size": 2,
			"code_actions_on_format": {
				"source.fixAll.eslint": true
			}
			// "formatter": {
			//   "external": {
			//     "command": "prettier",
			//     "arguments": ["--stdin-filepath", "{buffer_path}"]
			//   }
			// }
		},
		"TypeScript": {
			"tab_size": 2,
			"inlay_hints": {
				"enabled": true,
				"show_parameter_hints": false,
				"show_other_hints": true,
				"show_type_hints": true
			}
		},
		"Python": {
			"format_on_save": { "language_server": { "name": "ruff" } },
			"formatter": { "language_server": { "name": "ruff" } },
			"language_servers": ["pyright", "ruff"]
		},
		"C": {
			"format_on_save": "on",
			"tab_size": 4
		},
		"C++": {
			"format_on_save": "on",
			"tab_size": 4
		},
		"Rust": {
			"formatter": "language_server",
			"format_on_save": "on"
		},
		"Elixir": {
			"language_servers": ["next-ls"],
			"format_on_save": {
				"external": {
					"command": "mix",
					"arguments": ["format", "--stdin-filename", "{buffer_path}", "-"]
				}
			}
		}
	},
	"formatter": {
		"language_server": {
			"name": "biome"
		}
	},
	// Use zed commit editor
	"terminal": {
		"env": {
			"EDITOR": "zed --wait"
		}
	},
	// File syntax highlighting
	"file_types": {
		"Dockerfile": ["Dockerfile", "Dockerfile.*"],
		"JSON": ["json", "jsonc", "*.code-snippets"]
	},
	// File scan exclusions, hide on the file explorer and search
	"file_scan_exclusions": [
		"**/.git",
		"**/.svn",
		"**/.hg",
		"**/CVS",
		"**/.DS_Store",
		"**/Thumbs.db",
		"**/.classpath",
		"**/.settings",
		// above is default from Zed
		"**/out",
		"**/dist",
		"**/.husky",
		"**/.turbo",
		"**/.vscode-test",
		"**/.vscode",
		"**/.next",
		"**/.storybook",
		"**/.tap",
		"**/.nyc_output",
		"**/report",
		"**/node_modules"
	],
	// Turn off telemetry
	"telemetry": {
		"diagnostics": false,
		"metrics": false
	},
	// Move all panel to the right
	"project_panel": {
		"button": true,
		"dock": "right",
		"git_status": true
	},
	"outline_panel": {
		"dock": "right"
	},
	"collaboration_panel": {
		"dock": "left"
	},
	// Move some unnecessary panels to the left
	"notification_panel": {
		"dock": "left"
	},
	"chat_panel": {
		"dock": "left"
	}
}
